{"version":3,"sources":["../src/webhooks.ts"],"sourcesContent":["/* eslint-disable import/export */\nimport type { VerifyWebhookOptions } from '@clerk/backend/webhooks';\nimport { verifyWebhook as verifyWebhookBase } from '@clerk/backend/webhooks';\nimport type { Request as ExpressRequest } from 'express';\n\nimport { incomingMessageToRequest } from './utils';\n\n// Ordering of exports matter here since\n// we're overriding the base verifyWebhook\nexport * from '@clerk/backend/webhooks';\n\n/**\n * Verifies the authenticity of a webhook request using Svix.\n *\n * @param request - The incoming webhook Express Request object\n * @param options - Optional configuration object\n * @param options.signingSecret - Custom signing secret. If not provided, falls back to CLERK_WEBHOOK_SIGNING_SECRET env variable\n * @throws Will throw an error if the webhook signature verification fails\n * @returns A promise that resolves to the verified webhook event data\n *\n * @see {@link https://clerk.com/docs/webhooks/sync-data} to learn more about syncing Clerk data to your application using webhooks\n */\nexport async function verifyWebhook(req: ExpressRequest, options?: VerifyWebhookOptions) {\n  const webRequest = incomingMessageToRequest(req);\n  // Cloning instead of implementing the body inside incomingMessageToRequest\n  // to make it more predictable\n  const clonedRequest = new Request(webRequest, {\n    body: req.body,\n  });\n  return verifyWebhookBase(clonedRequest, options);\n}\n"],"mappings":";;;;;AAEA,SAAS,iBAAiB,yBAAyB;AAOnD,cAAc;AAad,eAAsB,cAAc,KAAqB,SAAgC;AACvF,QAAM,aAAa,yBAAyB,GAAG;AAG/C,QAAM,gBAAgB,IAAI,QAAQ,YAAY;AAAA,IAC5C,MAAM,IAAI;AAAA,EACZ,CAAC;AACD,SAAO,kBAAkB,eAAe,OAAO;AACjD;","names":[]}